// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum roleTypes {
  super_admin
  user
}

model User {
  id          String    @id @default(uuid())
  firstName   String?
  lastName    String?
  email       String    @unique
  password    String?
  phoneNumber String?
  roleType    roleTypes
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  deletedAt   DateTime?

  //relations 
  invitation Invitation[]
  Couple     Couple[]
}

model Couple {
  id           String    @id @default(uuid())
  coupleSlug   String    @unique
  partner1Name String
  partner2Name String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt
  deletedAt    DateTime?

  //relations
  user   User   @relation(fields: [userId], references: [id])
  userId String

  invitation Invitation[] @relation("CoupleToInvitation")

  // indexes
  @@index([userId])
}

model Invitation {
  id                    String    @id @default(uuid())
  eventDate             DateTime?
  welcomeMessage        String?
  groomParents          String?
  brideParents          String?
  guestMessage          String?
  specialRequest        String?
  dressCode             String?
  giftRegistryType      String?
  giftRegistryLink      String?
  giftRegistryMsg       String?
  bibleVerse            String?
  brideImage            String?
  eventDateImage        String?
  bibleImage            String?
  specialRequestImage   String?
  bibleReference        String?
  recomendedLodging     String?
  recomendedLodgingLink String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime? @updatedAt
  deletedAt             DateTime?

  // relations
  couple   Couple? @relation("CoupleToInvitation", fields: [coupleId], references: [id])
  coupleId String?

  createdByUser   User?   @relation(fields: [createdByUserId], references: [id])
  createdByUserId String?

  guest Guest[]
  event Event[]
  image Image[]

  // indexes
  @@index([coupleId, createdByUserId])
}

model Guest {
  id               String    @id @default(uuid())
  name             String
  phoneNumber      String?
  invitedPeople    Int? // Number of people invited
  confirmedPeople  Int? // Number of people confirmed
  confirmationCode String?
  message          String?
  guestSlug        String    @unique
  isGroup          Boolean   @default(false) // If the guest is a group
  createdAt        DateTime  @default(now())
  updatedAt        DateTime? @updatedAt
  deletedAt        DateTime?

  // relaciones
  invitation    Invitation @relation(fields: [invitationId], references: [id])
  invitationId  String
  groupMembers  Guest[]    @relation("GroupMembers") // Group members
  parentGroup   Guest?     @relation("GroupMembers", fields: [parentGroupId], references: [id])
  parentGroupId String? // Recursively reference to the parent group

  // indexes
  @@index([invitationId])
}

model Event {
  id               Int       @id @default(autoincrement())
  eventType        String?
  eventTime        DateTime?
  eventLocation    String?
  eventAddress     String?
  eventAddressLink String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime? @updatedAt
  deletedAt        DateTime?

  // relations
  invitation   Invitation @relation(fields: [invitationId], references: [id])
  invitationId String

  // indexes
  @@index([invitationId])
}

model Image {
  id          Int       @id @default(autoincrement())
  imageUrl    String    @db.VarChar(255)
  sectionName String?   @db.VarChar(50)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  deletedAt   DateTime?

  // Relaciones
  invitation   Invitation? @relation(fields: [invitationId], references: [id])
  invitationId String?

  @@index([invitationId])
}
