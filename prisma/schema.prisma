// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum roleTypes {
  super_admin
  user
}

model User {
  id          String    @id @default(uuid())
  firstName   String?
  lastName    String?
  email       String    @unique
  password    String?
  phoneNumber String?
  roleType    roleTypes
  createdAt   DateTime  @default(now())
  updatedAt   DateTime?
  deletedAt   DateTime?

  //relations 
  invitation Invitation[]
  payment    Payment[]
  templates  Templates[]
  Couple     Couple?
}

model Couple {
  id           Int       @id @default(autoincrement())
  coupleSlug   String    @unique
  partner1Name String
  partner2Name String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime?
  deletedAt    DateTime?

  //relations
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  invitation Invitation[]

  // indexes
  @@index([userId])
}

model Invitation {
  id                    Int       @id @default(autoincrement())
  eventDate             DateTime?
  welcomeMessage        String?
  groomParents          String?
  brideParents          String?
  guestMessage          String?
  specialRequest        String?
  dressCode             String?
  giftRegistryType      String?
  giftRegistryLink      String?
  giftRegistryMsg       String?
  bibleVerse            String?
  bibleReference        String?
  primaryColor          String?
  secondaryColor        String?
  recomendedLodging     String?
  recomendedLodgingLink String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime?

  // relations
  couple   Couple @relation(fields: [coupleId], references: [id])
  coupleId Int

  template   Templates @relation(fields: [templateId], references: [id])
  templateId Int

  createdByUser   User   @relation(fields: [createdByUserId], references: [id])
  createdByUserId String

  guest   Guest[]
  event   Event[]
  images  Images[]
  payment Payment[]

  // indexes
  @@index([coupleId, templateId, createdByUserId])
}

model Guest {
  id               String    @id @default(uuid())
  firstName        String?
  lastName         String?
  email            String?
  phoneNumber      String?
  invitedPeople    Int?
  confirmedPeople  Int?
  confirmationCode String?
  guestSlug        String    @unique
  createdAt        DateTime  @default(now())
  updatedAt        DateTime?

  // relations
  invitation   Invitation @relation(fields: [invitationId], references: [id])
  invitationId Int

  // indexes
  @@index([invitationId])
}

model Event {
  id               Int       @id @default(autoincrement())
  eventType        String?
  eventTime        DateTime?
  eventLocation    String?
  eventAddress     String?
  eventAddressLink String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime?

  // relations
  invitation   Invitation @relation(fields: [invitationId], references: [id])
  invitationId Int

  // indexes
  @@index([invitationId])
}

model Images {
  id          Int       @id @default(autoincrement())
  imageUrl    String?
  sectionName String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime?

  // relations
  invitation   Invitation @relation(fields: [invitationId], references: [id])
  invitationId Int

  // indexes
  @@index([invitationId])
}

model Payment {
  id            Int       @id @default(autoincrement())
  amount        Float?
  currency      String?
  paymentMethod String?
  paymentStatus String?
  transactionId String?
  paymentDate   DateTime?
  note          String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime?

  // relations
  invitation   Invitation @relation(fields: [invitationId], references: [id])
  invitationId Int

  user   User   @relation(fields: [userId], references: [id])
  userId String

  // indexes
  @@index([invitationId, userId])
}

model Templates {
  id              Int       @id @default(autoincrement())
  templateName    String?
  description     String?
  previewImageUrl String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime?

  // relations
  createdByUser   User   @relation(fields: [createdByUserId], references: [id])
  createdByUserId String

  templateSections TemplateSections[]
  invitation       Invitation[]

  // indexes
  @@index([createdByUserId])
}

model TemplateSections {
  id            Int       @id @default(autoincrement())
  sectionName   String?
  requiresImage Boolean?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime?

  // relations
  template   Templates @relation(fields: [templateId], references: [id])
  templateId Int

  // indexes
  @@index([templateId])
}
